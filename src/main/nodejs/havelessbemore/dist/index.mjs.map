{"version":3,"file":"index.mjs","sources":["../src/constants/constraints.ts","../src/constants/utf8.ts","../src/constants/stream.ts","../src/constants/workers.ts","../src/utils/stream.ts","../src/constants/utf8Trie.ts","../src/utils/utf8Trie.ts","../src/utils/worker.ts","../src/main.ts","../src/worker.ts","../src/index.ts"],"sourcesContent":["/**\n * The maximum number of entries in the file (i.e. 1 billion).\n */\nexport const MAX_ENTRIES = 1e9;\n\n/**\n * The maximum number of unique stations (i.e. 10 thousand).\n */\nexport const MAX_STATIONS = 1e4;\n\n/**\n * The maximum length in bytes of a station name (i.e. 100 bytes).\n */\nexport const STATION_NAME_MAX_LEN = 100;\n\n/**\n * The maximum length in bytes of an entry.\n *\n * Example: `Abha;71.3`\n * - Station name: 1-100 bytes\n * - Semicolon: 1 byte\n * - Temperature: 3-5 bytes\n * - Newline: 1 byte\n */\nexport const ENTRY_MAX_LEN = 107;\n","// UTF-8 char codes\n\n/**\n * The char code for a minus sign: -\n */\nexport const CHAR_MINUS = 45; // \"-\".charCodeAt(0);\n\n/**\n * The char code for a newline: \\n\n */\nexport const CHAR_NEWLINE = 10; // \"\\n\".charCodeAt(0);\n\n/**\n * The char code for a period: .\n */\nexport const CHAR_PERIOD = 46; // \".\".charCodeAt(0);\n\n/**\n * The char code for a semicolon: ;\n */\nexport const CHAR_SEMICOLON = 59; // \";\".charCodeAt(0);\n\n/**\n * The char code for a zero: 0\n */\nexport const CHAR_ZERO = 48; // \"0\".charCodeAt(0);\n\n// UTF-8 constants\n\n/**\n * The minimum value of the first byte of a UTF-8 code point.\n *\n * Ignores the control code points from U+0000 to U+001F.\n *\n * @see {@link https://www.charset.org/utf-8 | UTF-8 Charset}\n */\nexport const UTF8_B0_MIN = 32;\n\n/**\n * The minimum value for noninitial bytes of a UTF-8 code point.\n *\n * @see {@link https://en.wikipedia.org/wiki/UTF-8#Encoding | UTF-8 Encoding}\n */\nexport const UTF8_BN_MIN = 128;\n\nexport const UTF8_B0_1B_LEAD = 0b00000000;\nexport const UTF8_BN_LEAD = 0b10000000;\nexport const UTF8_B0_2B_LEAD = 0b11000000;\nexport const UTF8_B0_3B_LEAD = 0b11100000;\nexport const UTF8_B0_4B_LEAD = 0b11110000;\n\nexport const UTF8_B0_1B_LEAD_MASK = 0b10000000;\nexport const UTF8_BN_LEAD_MASK = 0b11000000;\nexport const UTF8_B0_2B_LEAD_MASK = 0b11100000;\nexport const UTF8_B0_3B_LEAD_MASK = 0b11110000;\nexport const UTF8_B0_4B_LEAD_MASK = 0b11111000;\n\nexport const UTF8_B0_1B_MAX = 0b01111111;\nexport const UTF8_BN_MAX = 0b10111111;\nexport const UTF8_B0_2B_MAX = 0b11011111;\nexport const UTF8_B0_3B_MAX = 0b11101111;\nexport const UTF8_B0_4B_MAX = 0b11110111;\nexport const UTF8_B0_MAX = UTF8_B0_4B_MAX;\n\nexport const UTF8_B0_1B_LEN = UTF8_B0_1B_MAX - UTF8_B0_MIN + 1;\nexport const UTF8_B0_2B_LEN = UTF8_B0_2B_MAX - UTF8_B0_MIN + 1;\nexport const UTF8_B0_3B_LEN = UTF8_B0_3B_MAX - UTF8_B0_MIN + 1;\nexport const UTF8_B0_4B_LEN = UTF8_B0_4B_MAX - UTF8_B0_MIN + 1;\nexport const UTF8_B0_LEN = UTF8_B0_MAX - UTF8_B0_MIN + 1;\nexport const UTF8_BN_LEN = UTF8_BN_MAX - UTF8_BN_MIN + 1;\n","import { CHAR_ZERO } from \"./utf8\";\n\n/**\n * The minimum value in bytes for `highWaterMark`.\n */\nexport const HIGH_WATER_MARK_MIN = 16384; // 16KiB\n\n/**\n * The maximum value in bytes for `highWaterMark`.\n */\nexport const HIGH_WATER_MARK_MAX = 1048576; // 1MiB\n\n/**\n * The `highWaterMark` for write streams.\n */\nexport const HIGH_WATER_MARK_OUT = 1048576; // 1MiB\n\n/**\n * The ratio of the file size to use for calculating\n * the `highWaterMark` of a stream.\n */\nexport const HIGH_WATER_MARK_RATIO = 0.000152;\n\n/**\n * The minimum size in bytes of a file chunk.\n */\nexport const CHUNK_SIZE_MIN = HIGH_WATER_MARK_MIN;\n\n// PARSE DOUBLE\n\n/**\n * Used to parse doubles from -9.9 to 9.9.\n */\nexport const CHAR_ZERO_11 = 11 * CHAR_ZERO;\n\n/**\n * Used to parse doubles from -99.9 to 99.9.\n */\nexport const CHAR_ZERO_111 = 111 * CHAR_ZERO;\n","/**\n * The minimum number of web workers (inclusive).\n */\nexport const MIN_WORKERS = 1;\n\n/**\n * The maximum number of web workers (inclusive).\n */\nexport const MAX_WORKERS = 512;\n","import { open } from \"fs/promises\";\n\nimport { CHAR_NEWLINE } from \"../constants/utf8\";\nimport {\n  HIGH_WATER_MARK_MAX,\n  HIGH_WATER_MARK_MIN,\n  HIGH_WATER_MARK_RATIO,\n} from \"../constants/stream\";\n\n/**\n * Clamp a value within a given range.\n *\n * @param value - The value to clamp.\n * @param min - The range min (inclusive).\n * @param max - The range max (inclusive).\n *\n * @returns The clamped value.\n */\nexport function clamp(value: number, min: number, max: number): number {\n  return value > min ? (value <= max ? value : max) : min;\n}\n\n/**\n * Splits a file into `target` chunks or less.\n *\n * - Each chunk is aligned to a file line;\n * i.e. file start, newline ('\\n') or file end.\n * - A chunk's size will be greater than or equal to `fileSize / target`.\n * - `target` chunks or less will be generated.\n *\n * @param filePath - The local path to the file to be chunked.\n * @param target - The target number of chunks to split the file into.\n * @param maxLineLength - The maximum length of a line in the file.\n * @param minSize - The minimum size of a chunk in bytes. Defaults to `0`.\n *\n * @returns A promise that resolves to an array of index pairs, where each\n * pair represents a chunk's start (inclusive) and end (exclusive) indices.\n *\n * @throws Will throw an error if the file cannot be opened or read.\n */\nexport async function getFileChunks(\n  filePath: string,\n  target: number,\n  maxLineLength: number,\n  minSize = 0,\n): Promise<[number, number][]> {\n  // Open the given file\n  const file = await open(filePath);\n  try {\n    // Get the file's size\n    const size = (await file.stat()).size;\n    // Calculate each chunk's target size\n    const chunkSize = Math.max(minSize, Math.floor(size / target));\n    // Initialize constants\n    const buffer = Buffer.allocUnsafe(maxLineLength);\n    const chunks: [number, number][] = [];\n    // Traverse the file, visiting each chunk's end index (exclusive)\n    let start = 0;\n    for (let end = chunkSize; end < size; end += chunkSize) {\n      // Read a line at the intended end index\n      const res = await file.read(buffer, 0, maxLineLength, end);\n      // Find the nearest newline ('\\n') character\n      const newline = buffer.indexOf(CHAR_NEWLINE);\n      // If found\n      if (newline >= 0 && newline < res.bytesRead) {\n        // Align end with the newline\n        end += newline + 1;\n        // Add the chunk\n        chunks.push([start, end]);\n        // Update the start index for the next chunk\n        start = end;\n      }\n    }\n    // Add the last chunk, if necessary\n    if (start < size) {\n      chunks.push([start, size]);\n    }\n    // Return chunks\n    return chunks;\n  } finally {\n    // Always close the file before returning\n    await file.close();\n  }\n}\n\n/**\n * Calculates an optimal highWaterMark value based on the given size.\n *\n * @param size - The size based on which the highWaterMark will be calculated.\n *\n * @returns The calculated highWaterMark value.\n */\nexport function getHighWaterMark(size: number): number {\n  // Get size percentage\n  size *= HIGH_WATER_MARK_RATIO;\n  // Get nearest power\n  size = Math.round(Math.log2(size));\n  // Calculate high water mark\n  size = 2 ** size;\n  // Clamp value\n  return clamp(size, HIGH_WATER_MARK_MIN, HIGH_WATER_MARK_MAX);\n}\n","import { UTF8_B0_2B_LEN } from \"./utf8\";\n\n// Configurable constants\n\n/**\n * The default initial size of a trie.\n */\nexport const TRIE_DEFAULT_SIZE = 524288; // 2 MiB\n\n/**\n * The growth factor for resizing a trie (Approx. Phi)\n */\nexport const TRIE_GROWTH_FACTOR = 1.6180339887;\n\n// Internal trie pointer\n\nexport const TRIE_PTR_IDX_IDX = 0;\nexport const TRIE_PTR_IDX_MEM = 1;\n\nexport const TRIE_PTR_MEM = TRIE_PTR_IDX_MEM;\n\n// Cross-trie pointer (aka redirect)\n\nexport const TRIE_XPTR_ID_IDX = 0;\nexport const TRIE_XPTR_ID_MEM = 1;\n\nexport const TRIE_XPTR_IDX_IDX = 1;\nexport const TRIE_XPTR_IDX_MEM = 1;\n\nexport const TRIE_XPTR_MEM = TRIE_XPTR_ID_MEM + TRIE_XPTR_IDX_MEM;\n\n// Trie node\n\nexport const TRIE_NODE_ID_IDX = 0;\nexport const TRIE_NODE_ID_MEM = 1;\n\nexport const TRIE_NODE_VALUE_IDX = 1;\nexport const TRIE_NODE_VALUE_MEM = 1;\n\nexport const TRIE_NODE_CHILDREN_IDX = 2;\nexport const TRIE_NODE_CHILDREN_LEN = UTF8_B0_2B_LEN;\nexport const TRIE_NODE_CHILDREN_MEM = TRIE_PTR_MEM * TRIE_NODE_CHILDREN_LEN;\n\nexport const TRIE_NODE_MEM =\n  TRIE_NODE_ID_MEM + TRIE_NODE_VALUE_MEM + TRIE_NODE_CHILDREN_MEM;\n\n// Trie\n\n/**\n * Represents a null / undefined trie element.\n */\nexport const TRIE_NULL = 0;\n\nexport const TRIE_SIZE_IDX = 0;\nexport const TRIE_SIZE_MEM = 1;\n\nexport const TRIE_ROOT_IDX = 1;\nexport const TRIE_ROOT_MEM = TRIE_NODE_MEM;\n\nexport const TRIE_ID_IDX = TRIE_ROOT_IDX + TRIE_NODE_ID_IDX;\nexport const TRIE_MEM = TRIE_SIZE_MEM + TRIE_ROOT_MEM;\n","import { WriteStream } from \"node:fs\";\n\nimport {\n  TRIE_DEFAULT_SIZE,\n  TRIE_PTR_MEM,\n  TRIE_PTR_IDX_IDX,\n  TRIE_GROWTH_FACTOR,\n  TRIE_MEM,\n  TRIE_ID_IDX,\n  TRIE_NODE_CHILDREN_IDX,\n  TRIE_NODE_ID_IDX,\n  TRIE_NODE_VALUE_IDX,\n  TRIE_NULL,\n  TRIE_ROOT_IDX,\n  TRIE_SIZE_IDX,\n  TRIE_XPTR_MEM,\n  TRIE_XPTR_IDX_IDX,\n  TRIE_XPTR_ID_IDX,\n  TRIE_NODE_MEM,\n  TRIE_NODE_CHILDREN_MEM,\n  TRIE_NODE_CHILDREN_LEN,\n} from \"../constants/utf8Trie\";\nimport { UTF8_B0_MIN } from \"../constants/utf8\";\n\nexport function add(\n  trie: Int32Array,\n  key: ArrayLike<number>,\n  min: number,\n  max: number,\n): [Int32Array, number] {\n  let index = TRIE_ROOT_IDX;\n  while (min < max) {\n    index += TRIE_NODE_CHILDREN_IDX + TRIE_PTR_MEM * (key[min++] - UTF8_B0_MIN);\n    let child = trie[index + TRIE_PTR_IDX_IDX];\n    if (child === TRIE_NULL) {\n      // Allocate new node\n      child = trie[TRIE_SIZE_IDX];\n      if (child + TRIE_NODE_MEM > trie.length) {\n        trie = grow(trie, child + TRIE_NODE_MEM);\n      }\n      trie[TRIE_SIZE_IDX] += TRIE_NODE_MEM;\n      // Attach and initialize node\n      trie[index + TRIE_PTR_IDX_IDX] = child;\n      trie[child + TRIE_NODE_ID_IDX] = trie[TRIE_ID_IDX];\n    }\n    index = child;\n  }\n\n  return [trie, index];\n}\n\nexport function createTrie(id = 0, size = TRIE_DEFAULT_SIZE): Int32Array {\n  size = Math.max(TRIE_MEM, size);\n  const trie = new Int32Array(new SharedArrayBuffer(size << 2));\n  trie[TRIE_SIZE_IDX] = TRIE_MEM;\n  trie[TRIE_ID_IDX] = id;\n  return trie;\n}\n\nexport function grow(trie: Int32Array, minSize = 0): Int32Array {\n  const length = trie[TRIE_SIZE_IDX];\n  minSize = Math.max(minSize, Math.ceil(length * TRIE_GROWTH_FACTOR));\n  const next = new Int32Array(new SharedArrayBuffer(minSize << 2));\n  for (let i = 0; i < length; ++i) {\n    next[i] = trie[i];\n  }\n  return next;\n}\n\nexport function mergeLeft(\n  tries: Int32Array[],\n  at: number,\n  bt: number,\n  mergeFn: (ai: number, bi: number) => void,\n): void {\n  const queue: [number, number, number, number][] = [\n    [at, TRIE_ROOT_IDX, bt, TRIE_ROOT_IDX],\n  ];\n\n  do {\n    const Q = queue.length;\n    for (let q = 0; q < Q; ++q) {\n      let [at, ai, bt, bi] = queue[q];\n\n      // If right value is not null\n      const bvi = tries[bt][bi + TRIE_NODE_VALUE_IDX];\n      if (bvi !== TRIE_NULL) {\n        // If left value is not null\n        const avi = tries[at][ai + TRIE_NODE_VALUE_IDX];\n        if (avi !== TRIE_NULL) {\n          mergeFn(avi, bvi);\n        } else {\n          tries[at][ai + TRIE_NODE_VALUE_IDX] = bvi;\n        }\n      }\n\n      // Adjust to children property\n      ai += TRIE_NODE_CHILDREN_IDX;\n      bi += TRIE_NODE_CHILDREN_IDX;\n\n      // Traverse right children\n      const bn = bi + TRIE_NODE_CHILDREN_MEM;\n      while (bi < bn) {\n        // If right child is null\n        let ri = tries[bt][bi + TRIE_PTR_IDX_IDX];\n        if (ri === TRIE_NULL) {\n          // Move to next children\n          ai += TRIE_PTR_MEM;\n          bi += TRIE_PTR_MEM;\n          continue;\n        }\n\n        // Resolve right child if redirect\n        const rt = tries[bt][ri + TRIE_NODE_ID_IDX];\n        if (bt !== rt) {\n          ri = tries[bt][ri + TRIE_XPTR_IDX_IDX];\n        }\n\n        // If left child is null\n        let li = tries[at][ai + TRIE_PTR_IDX_IDX];\n        if (li === TRIE_NULL) {\n          // Allocate new redirect in left trie\n          li = tries[at][TRIE_SIZE_IDX];\n          if (li + TRIE_XPTR_MEM > tries[at].length) {\n            tries[at] = grow(tries[at], li + TRIE_XPTR_MEM);\n          }\n          tries[at][TRIE_SIZE_IDX] += TRIE_XPTR_MEM;\n          // Add new redirect\n          tries[at][li + TRIE_XPTR_ID_IDX] = rt;\n          tries[at][li + TRIE_XPTR_IDX_IDX] = ri;\n        } else {\n          // Resolve left child if redirect\n          const lt = tries[at][li + TRIE_NODE_ID_IDX];\n          if (at !== lt) {\n            ai = tries[at][li + TRIE_XPTR_IDX_IDX];\n          }\n          // Merge children\n          queue.push([lt, li, rt, ri]);\n        }\n\n        // Move to next children\n        ai += TRIE_PTR_MEM;\n        bi += TRIE_PTR_MEM;\n      }\n    }\n    queue.splice(0, Q);\n  } while (queue.length > 0);\n}\n\nexport function print(\n  tries: Int32Array[],\n  key: Buffer,\n  trieIndex: number,\n  stream: WriteStream,\n  separator = \"\",\n  callbackFn: (\n    stream: WriteStream,\n    key: Buffer,\n    keyLen: number,\n    valueIndex: number,\n  ) => void,\n): void {\n  const stack: [number, number, number][] = new Array(key.length + 1);\n  stack[0] = [trieIndex, TRIE_ROOT_IDX + TRIE_NODE_CHILDREN_IDX, 0];\n\n  let top = 0;\n  let tail = false;\n  do {\n    let [trieI, childPtr, numChild] = stack[top];\n\n    // Check if end of children array\n    if (numChild >= TRIE_NODE_CHILDREN_LEN) {\n      --top;\n      continue;\n    }\n\n    // Update stack top\n    stack[top][1] += TRIE_PTR_MEM;\n    ++stack[top][2];\n\n    // Check if child exists\n    let childI = tries[trieI][childPtr + TRIE_PTR_IDX_IDX];\n    if (childI === TRIE_NULL) {\n      continue;\n    }\n\n    // Resolve redirect, if any\n    const childTrieI = tries[trieI][childI + TRIE_NODE_ID_IDX];\n    if (trieI !== childTrieI) {\n      childI = tries[trieI][childI + TRIE_XPTR_IDX_IDX];\n      trieI = childTrieI;\n    }\n\n    // Add the child to the stack\n    key[top] = numChild + UTF8_B0_MIN;\n    stack[++top] = [trieI, childI + TRIE_NODE_CHILDREN_IDX, 0];\n\n    // Print value, if any\n    const valueIndex = tries[trieI][childI + TRIE_NODE_VALUE_IDX];\n    if (valueIndex !== TRIE_NULL) {\n      // Print separator if not first value\n      if (tail) {\n        stream.write(separator);\n      }\n      tail = true;\n      callbackFn(stream, key, top, valueIndex);\n    }\n  } while (top >= 0);\n}\n","import { Worker } from \"worker_threads\";\n\n/**\n * Creates a new Worker instance.\n *\n * @param workerPath - The path to the worker script.\n *\n * @returns A new Worker instance.\n */\nexport function createWorker(workerPath: string): Worker {\n  const worker = new Worker(workerPath);\n  worker.on(\"error\", (err) => {\n    throw err;\n  });\n  worker.on(\"messageerror\", (err) => {\n    throw err;\n  });\n  worker.on(\"exit\", (code) => {\n    if (code > 1 || code < 0) {\n      throw new Error(`Worker ${worker.threadId} exited with code ${code}`);\n    }\n  });\n  return worker;\n}\n\n/**\n * Executes a task on a Worker and returns a Promise that resolves with the response.\n *\n * @param worker - The Worker instance to execute the task.\n * @param req - The request to send to the worker.\n *\n * @returns A Promise that resolves with the response from the worker.\n */\nexport function exec<Req, Res>(worker: Worker, req: Req): Promise<Res> {\n  return new Promise<Res>((resolve) => {\n    worker.once(\"message\", resolve);\n    worker.postMessage(req);\n  });\n}\n","import { WriteStream, createWriteStream } from \"node:fs\";\nimport { Worker } from \"node:worker_threads\";\n\nimport type { ProcessRequest } from \"./types/processRequest\";\nimport type { ProcessResponse } from \"./types/processResponse\";\n\nimport {\n  ENTRY_MAX_LEN,\n  MAX_STATIONS,\n  STATION_NAME_MAX_LEN,\n} from \"./constants/constraints\";\nimport { CHUNK_SIZE_MIN, HIGH_WATER_MARK_OUT } from \"./constants/stream\";\nimport { MAX_WORKERS, MIN_WORKERS } from \"./constants/workers\";\nimport { clamp, getFileChunks } from \"./utils/stream\";\nimport { print } from \"./utils/utf8Trie\";\nimport { MergeResponse } from \"./types/mergeResponse\";\nimport { MergeRequest } from \"./types/mergeRequest\";\nimport { createWorker, exec } from \"./utils/worker\";\n\nexport async function run(\n  filePath: string,\n  workerPath: string,\n  maxWorkers: number,\n  outPath = \"\",\n): Promise<void> {\n  // Sanitize number of workers\n  maxWorkers = clamp(maxWorkers, MIN_WORKERS, MAX_WORKERS);\n\n  // Split the file into chunks. Creates 1 or fewer chunks per worker\n  const chunks = await getFileChunks(\n    filePath,\n    maxWorkers,\n    ENTRY_MAX_LEN,\n    CHUNK_SIZE_MIN,\n  );\n\n  // Adjust the number of workers to the number of chunks\n  maxWorkers = chunks.length;\n\n  // Initialize data\n  const valBuf = new SharedArrayBuffer((MAX_STATIONS * maxWorkers + 1) << 4);\n  const mins = new Int16Array(valBuf);\n  const maxes = new Int16Array(valBuf, 2);\n  const counts = new Uint32Array(valBuf, 4);\n  const sums = new Float64Array(valBuf, 8);\n  const tries: Int32Array[] = new Array(maxWorkers);\n\n  // Create workers\n  const workers = new Array<Worker>(maxWorkers);\n  for (let i = 0; i < maxWorkers; ++i) {\n    workers[i] = createWorker(workerPath);\n  }\n\n  // Process each chunk\n  const tasks = new Array<Promise<unknown>>(maxWorkers);\n  for (let i = 0; i < maxWorkers; ++i) {\n    tasks[i] = exec<ProcessRequest, ProcessResponse>(workers[i], {\n      type: \"process_request\",\n      counts,\n      end: chunks[i][1],\n      filePath,\n      id: i,\n      maxes,\n      mins,\n      start: chunks[i][0],\n      sums,\n    }).then((res) => {\n      tries[res.id] = res.trie;\n    });\n  }\n\n  // Merge tries\n  for (let i = tasks.length - 1; i > 0; --i) {\n    const a = (i - 1) >> 1;\n    const b = i;\n    tasks[a] = tasks[a]\n      .then(() => tasks[b])\n      .then(() =>\n        exec<MergeRequest, MergeResponse>(workers[a], {\n          type: \"merge_request\",\n          a,\n          b,\n          counts,\n          maxes,\n          mins,\n          sums,\n          tries,\n        }),\n      )\n      .then((res) => {\n        tries[res.id] = res.trie;\n      });\n  }\n\n  // Terminate workers\n  for (let i = 0; i < maxWorkers; ++i) {\n    tasks[i] = tasks[i].then(() => workers[i].terminate());\n  }\n\n  // Wait for completion\n  await Promise.all(tasks);\n\n  // Print results\n  const out = createWriteStream(outPath, {\n    fd: outPath.length < 1 ? 1 : undefined,\n    flags: \"a\",\n    highWaterMark: HIGH_WATER_MARK_OUT,\n  });\n  const buffer = Buffer.allocUnsafe(STATION_NAME_MAX_LEN);\n  out.write(\"{\");\n  print(tries, buffer, 0, out, \", \", printStation);\n  out.end(\"}\\n\");\n\n  function printStation(\n    stream: WriteStream,\n    name: Buffer,\n    nameLen: number,\n    vi: number,\n  ): void {\n    const avg = Math.round(sums[vi << 1] / counts[vi << 2]);\n    stream.write(name.toString(\"utf8\", 0, nameLen));\n    stream.write(\"=\");\n    stream.write((mins[vi << 3] / 10).toFixed(1));\n    stream.write(\"/\");\n    stream.write((avg / 10).toFixed(1));\n    stream.write(\"/\");\n    stream.write((maxes[vi << 3] / 10).toFixed(1));\n  }\n}\n","import { createReadStream } from \"node:fs\";\n\nimport type { ProcessRequest } from \"./types/processRequest\";\nimport type { ProcessResponse } from \"./types/processResponse\";\n\nimport { CHAR_SEMICOLON } from \"./constants/utf8\";\nimport { CHAR_NEWLINE } from \"./constants/utf8\";\nimport { CHAR_MINUS } from \"./constants/utf8\";\nimport { ENTRY_MAX_LEN, MAX_STATIONS } from \"./constants/constraints\";\nimport { CHAR_ZERO_11, CHAR_ZERO_111 } from \"./constants/stream\";\nimport { TRIE_NODE_VALUE_IDX, TRIE_NULL } from \"./constants/utf8Trie\";\nimport { getHighWaterMark } from \"./utils/stream\";\nimport { add, createTrie, mergeLeft } from \"./utils/utf8Trie\";\nimport { MergeRequest } from \"./types/mergeRequest\";\nimport { MergeResponse } from \"./types/mergeResponse\";\n\nexport async function run({\n  end,\n  filePath,\n  id,\n  start,\n  // Shared memory\n  counts,\n  maxes,\n  mins,\n  sums,\n}: ProcessRequest): Promise<ProcessResponse> {\n  // Check chunk size\n  if (start >= end) {\n    return { type: \"process_response\", id, trie: createTrie(id, 0) };\n  }\n\n  // Initialize constants\n  let trie = createTrie(id);\n  let stations = id * MAX_STATIONS + 1;\n  const buffer = Buffer.allocUnsafe(ENTRY_MAX_LEN);\n\n  // Create the chunk stream\n  const stream = createReadStream(filePath, {\n    start,\n    end: end - 1,\n    highWaterMark: getHighWaterMark(end - start),\n  });\n\n  // For each chunk\n  let bufI = 0;\n  let tempI = 0;\n  let leaf: number;\n  for await (const chunk of stream) {\n    // For each byte\n    const N = chunk.length;\n    for (let i = 0; i < N; ++i) {\n      if (chunk[i] === CHAR_SEMICOLON) {\n        // If semicolon\n        tempI = bufI;\n      } else if (chunk[i] !== CHAR_NEWLINE) {\n        // If not newline\n        buffer[bufI++] = chunk[i];\n      } else {\n        // Get temperature\n        const tempV = parseDouble(buffer, tempI, bufI);\n        bufI = 0;\n        // Add the station's name to the trie and get leaf index\n        [trie, leaf] = add(trie, buffer, 0, tempI);\n        // If the station existed\n        if (trie[leaf + TRIE_NODE_VALUE_IDX] !== TRIE_NULL) {\n          // Update the station's value\n          updateStation(trie[leaf + TRIE_NODE_VALUE_IDX], tempV);\n        } else {\n          // Add the new station's value\n          trie[leaf + TRIE_NODE_VALUE_IDX] = stations;\n          newStation(stations++, tempV);\n        }\n      }\n    }\n  }\n\n  function newStation(index: number, temp: number): void {\n    mins[index << 3] = temp;\n    maxes[index << 3] = temp;\n    counts[index << 2] = 1;\n    sums[index << 1] = temp;\n  }\n\n  function updateStation(index: number, temp: number): void {\n    index <<= 3;\n    mins[index] = mins[index] <= temp ? mins[index] : temp;\n    maxes[index] = maxes[index] >= temp ? maxes[index] : temp;\n    ++counts[index >> 1];\n    sums[index >> 2] += temp;\n  }\n\n  return { type: \"process_response\", id, trie };\n}\n\nexport function parseDouble(b: Buffer, min: number, max: number): number {\n  if (b[min] === CHAR_MINUS) {\n    ++min;\n    return min + 4 > max\n      ? -(10 * b[min] + b[min + 2] - CHAR_ZERO_11)\n      : -(100 * b[min] + 10 * b[min + 1] + b[min + 3] - CHAR_ZERO_111);\n  }\n  return min + 4 > max\n    ? 10 * b[min] + b[min + 2] - CHAR_ZERO_11\n    : 100 * b[min] + 10 * b[min + 1] + b[min + 3] - CHAR_ZERO_111;\n}\n\nexport function merge({\n  a,\n  b,\n  tries,\n  counts,\n  maxes,\n  mins,\n  sums,\n}: MergeRequest): MergeResponse {\n  mergeLeft(tries, a, b, mergeStations);\n  function mergeStations(ai: number, bi: number): void {\n    ai <<= 3;\n    bi <<= 3;\n    mins[ai] = Math.min(mins[ai], mins[bi]);\n    maxes[ai] = Math.max(maxes[ai], maxes[bi]);\n    counts[ai >> 1] += counts[bi >> 1];\n    sums[ai >> 2] += sums[bi >> 2];\n  }\n  return { type: \"merge_response\", id: a, trie: tries[a] };\n}\n","import { availableParallelism } from \"node:os\";\nimport { fileURLToPath } from \"node:url\";\nimport { isMainThread, parentPort } from \"node:worker_threads\";\n\nimport { run as runMain } from \"./main\";\nimport { merge, run as runWorker } from \"./worker\";\nimport { Message } from \"./types/message\";\nimport { ProcessRequest } from \"./types/processRequest\";\nimport { MergeRequest } from \"./types/mergeRequest\";\n\nif (isMainThread) {\n  const workerPath = fileURLToPath(import.meta.url);\n  runMain(process.argv[2], workerPath, availableParallelism());\n} else {\n  parentPort!.addListener(\"message\", async (msg: Message) => {\n    if (msg.type === \"process_request\") {\n      const res = await runWorker(msg as ProcessRequest);\n      parentPort!.postMessage(res);\n    } else if (msg.type === \"merge_request\") {\n      const res = merge(msg as MergeRequest);\n      parentPort!.postMessage(res);\n    } else {\n      throw new Error(\"Unknown message type\");\n    }\n  });\n}\n"],"names":["MAX_STATIONS","STATION_NAME_MAX_LEN","ENTRY_MAX_LEN","CHAR_MINUS","CHAR_NEWLINE","CHAR_SEMICOLON","CHAR_ZERO","UTF8_B0_MIN","UTF8_B0_2B_LEN","HIGH_WATER_MARK_MIN","HIGH_WATER_MARK_MAX","HIGH_WATER_MARK_OUT","HIGH_WATER_MARK_RATIO","CHUNK_SIZE_MIN","CHAR_ZERO_11","CHAR_ZERO_111","MIN_WORKERS","MAX_WORKERS","clamp","value","min","max","getFileChunks","filePath","target","maxLineLength","minSize","file","open","size","chunkSize","buffer","chunks","start","end","res","newline","getHighWaterMark","TRIE_DEFAULT_SIZE","TRIE_GROWTH_FACTOR","TRIE_PTR_IDX_IDX","TRIE_PTR_IDX_MEM","TRIE_PTR_MEM","TRIE_XPTR_ID_IDX","TRIE_XPTR_ID_MEM","TRIE_XPTR_IDX_IDX","TRIE_XPTR_IDX_MEM","TRIE_XPTR_MEM","TRIE_NODE_ID_IDX","TRIE_NODE_ID_MEM","TRIE_NODE_VALUE_IDX","TRIE_NODE_VALUE_MEM","TRIE_NODE_CHILDREN_IDX","TRIE_NODE_CHILDREN_LEN","TRIE_NODE_CHILDREN_MEM","TRIE_NODE_MEM","TRIE_NULL","TRIE_SIZE_IDX","TRIE_SIZE_MEM","TRIE_ROOT_IDX","TRIE_ROOT_MEM","TRIE_ID_IDX","TRIE_MEM","add","trie","key","index","child","grow","createTrie","id","length","next","i","mergeLeft","tries","at","bt","mergeFn","queue","Q","q","ai","bi","bvi","avi","bn","ri","rt","li","lt","print","trieIndex","stream","separator","callbackFn","stack","top","tail","trieI","childPtr","numChild","childI","childTrieI","valueIndex","createWorker","workerPath","worker","Worker","err","code","exec","req","resolve","run","maxWorkers","outPath","valBuf","mins","maxes","counts","sums","workers","tasks","a","b","out","createWriteStream","printStation","name","nameLen","vi","avg","stations","createReadStream","bufI","tempI","leaf","chunk","N","tempV","parseDouble","updateStation","newStation","temp","merge","mergeStations","isMainThread","fileURLToPath","runMain","availableParallelism","parentPort","msg","runWorker"],"mappings":"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"}