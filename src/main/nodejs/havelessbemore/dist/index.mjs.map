{"version":3,"file":"index.mjs","sources":["../src/constants/constraints.ts","../src/constants/utf8.ts","../src/constants/stream.ts","../src/constants/workers.ts","../src/utils/stream.ts","../src/constants/utf8Trie.ts","../src/utils/utf8Trie.ts","../src/main.ts","../src/worker.ts","../src/index.ts"],"sourcesContent":["/**\n * The maximum number of entries in the file (i.e. 1 billion).\n */\nexport const MAX_ENTRIES = 1e9;\n\n/**\n * The maximum number of unique stations (i.e. 10 thousand).\n */\nexport const MAX_STATIONS = 1e4;\n\n/**\n * The maximum length in bytes of a station name (i.e. 100 bytes).\n */\nexport const STATION_NAME_MAX_LEN = 100;\n\n/**\n * The maximum length in bytes of an entry.\n *\n * Example: `Abha;71.3`\n * - Station name: 1-100 bytes\n * - Semicolon: 1 byte\n * - Temperature: 3-5 bytes\n * - Newline: 1 byte\n */\nexport const ENTRY_MAX_LEN = 107;\n","// UTF-8 char codes\n\n/**\n * The char code for a minus sign: -\n */\nexport const CHAR_MINUS = 45; // \"-\".charCodeAt(0);\n\n/**\n * The char code for a newline: \\n\n */\nexport const CHAR_NEWLINE = 10; // \"\\n\".charCodeAt(0);\n\n/**\n * The char code for a period: .\n */\nexport const CHAR_PERIOD = 46; // \".\".charCodeAt(0);\n\n/**\n * The char code for a semicolon: ;\n */\nexport const CHAR_SEMICOLON = 59; // \";\".charCodeAt(0);\n\n/**\n * The char code for a zero: 0\n */\nexport const CHAR_ZERO = 48; // \"0\".charCodeAt(0);\n\n// UTF-8 constants\n\n/**\n * The minimum value of the first byte of a UTF-8 code point.\n *\n * Ignores the control code points from U+0000 to U+001F.\n *\n * @see {@link https://www.charset.org/utf-8 | UTF-8 Charset}\n */\nexport const UTF8_B0_MIN = 32;\n\n/**\n * The minimum value for noninitial bytes of a UTF-8 code point.\n *\n * @see {@link https://en.wikipedia.org/wiki/UTF-8#Encoding | UTF-8 Encoding}\n */\nexport const UTF8_BN_MIN = 128;\n\nexport const UTF8_B0_1B_LEAD = 0b00000000;\nexport const UTF8_BN_LEAD = 0b10000000;\nexport const UTF8_B0_2B_LEAD = 0b11000000;\nexport const UTF8_B0_3B_LEAD = 0b11100000;\nexport const UTF8_B0_4B_LEAD = 0b11110000;\n\nexport const UTF8_B0_1B_LEAD_MASK = 0b10000000;\nexport const UTF8_BN_LEAD_MASK = 0b11000000;\nexport const UTF8_B0_2B_LEAD_MASK = 0b11100000;\nexport const UTF8_B0_3B_LEAD_MASK = 0b11110000;\nexport const UTF8_B0_4B_LEAD_MASK = 0b11111000;\n\nexport const UTF8_B0_1B_MAX = 0b01111111;\nexport const UTF8_BN_MAX = 0b10111111;\nexport const UTF8_B0_2B_MAX = 0b11011111;\nexport const UTF8_B0_3B_MAX = 0b11101111;\nexport const UTF8_B0_4B_MAX = 0b11110111;\nexport const UTF8_B0_MAX = UTF8_B0_4B_MAX;\n\nexport const UTF8_B0_1B_LEN = UTF8_B0_1B_MAX - UTF8_B0_MIN + 1;\nexport const UTF8_B0_2B_LEN = UTF8_B0_2B_MAX - UTF8_B0_MIN + 1;\nexport const UTF8_B0_3B_LEN = UTF8_B0_3B_MAX - UTF8_B0_MIN + 1;\nexport const UTF8_B0_4B_LEN = UTF8_B0_4B_MAX - UTF8_B0_MIN + 1;\nexport const UTF8_B0_LEN = UTF8_B0_MAX - UTF8_B0_MIN + 1;\nexport const UTF8_BN_LEN = UTF8_BN_MAX - UTF8_BN_MIN + 1;\n","import { CHAR_ZERO } from \"./utf8\";\n\n/**\n * The minimum value in bytes for `highWaterMark`.\n */\nexport const HIGH_WATER_MARK_MIN = 16384; // 16KiB\n\n/**\n * The maximum value in bytes for `highWaterMark`.\n */\nexport const HIGH_WATER_MARK_MAX = 1048576; // 1MiB\n\n/**\n * The `highWaterMark` for write streams.\n */\nexport const HIGH_WATER_MARK_OUT = 1048576; // 1MiB\n\n/**\n * The ratio of the file size to use for calculating\n * the `highWaterMark` of a stream.\n */\nexport const HIGH_WATER_MARK_RATIO = 0.000152;\n\n/**\n * The minimum size in bytes of a file chunk.\n */\nexport const CHUNK_SIZE_MIN = HIGH_WATER_MARK_MIN;\n\n// PARSE DOUBLE\n\n/**\n * Used to parse doubles from -9.9 to 9.9.\n */\nexport const CHAR_ZERO_11 = 11 * CHAR_ZERO;\n\n/**\n * Used to parse doubles from -99.9 to 99.9.\n */\nexport const CHAR_ZERO_111 = 111 * CHAR_ZERO;\n","/**\n * The minimum number of web workers (inclusive).\n */\nexport const MIN_WORKERS = 1;\n\n/**\n * The maximum number of web workers (inclusive).\n */\nexport const MAX_WORKERS = 512;\n","import { open } from \"fs/promises\";\n\nimport { CHAR_NEWLINE } from \"../constants/utf8\";\nimport {\n  HIGH_WATER_MARK_MAX,\n  HIGH_WATER_MARK_MIN,\n  HIGH_WATER_MARK_RATIO,\n} from \"../constants/stream\";\n\n/**\n * Clamp a value within a given range.\n *\n * @param value - The value to clamp.\n * @param min - The range min (inclusive).\n * @param max - The range max (inclusive).\n *\n * @returns The clamped value.\n */\nexport function clamp(value: number, min: number, max: number): number {\n  return value > min ? (value <= max ? value : max) : min;\n}\n\n/**\n * Splits a file into `target` chunks or less.\n *\n * - Each chunk is aligned to a file line;\n * i.e. file start, newline ('\\n') or file end.\n * - A chunk's size will be greater than or equal to `fileSize / target`.\n * - `target` chunks or less will be generated.\n *\n * @param filePath - The local path to the file to be chunked.\n * @param target - The target number of chunks to split the file into.\n * @param maxLineLength - The maximum length of a line in the file.\n * @param minSize - The minimum size of a chunk in bytes. Defaults to `0`.\n *\n * @returns A promise that resolves to an array of index pairs, where each\n * pair represents a chunk's start (inclusive) and end (exclusive) indices.\n *\n * @throws Will throw an error if the file cannot be opened or read.\n */\nexport async function getFileChunks(\n  filePath: string,\n  target: number,\n  maxLineLength: number,\n  minSize = 0,\n): Promise<[number, number][]> {\n  // Open the given file\n  const file = await open(filePath);\n  try {\n    // Get the file's size\n    const size = (await file.stat()).size;\n    // Calculate each chunk's target size\n    const chunkSize = Math.max(minSize, Math.floor(size / target));\n    // Initialize constants\n    const buffer = Buffer.allocUnsafe(maxLineLength);\n    const chunks: [number, number][] = [];\n    // Traverse the file, visiting each chunk's end index (exclusive)\n    let start = 0;\n    for (let end = chunkSize; end < size; end += chunkSize) {\n      // Read a line at the intended end index\n      const res = await file.read(buffer, 0, maxLineLength, end);\n      // Find the nearest newline ('\\n') character\n      const newline = buffer.indexOf(CHAR_NEWLINE);\n      // If found\n      if (newline >= 0 && newline < res.bytesRead) {\n        // Align end with the newline\n        end += newline + 1;\n        // Add the chunk\n        chunks.push([start, end]);\n        // Update the start index for the next chunk\n        start = end;\n      }\n    }\n    // Add the last chunk, if necessary\n    if (start < size) {\n      chunks.push([start, size]);\n    }\n    // Return chunks\n    return chunks;\n  } finally {\n    // Always close the file before returning\n    await file.close();\n  }\n}\n\n/**\n * Calculates an optimal highWaterMark value based on the given size.\n *\n * @param size - The size based on which the highWaterMark will be calculated.\n *\n * @returns The calculated highWaterMark value.\n */\nexport function getHighWaterMark(size: number): number {\n  // Get size percentage\n  size *= HIGH_WATER_MARK_RATIO;\n  // Get nearest power\n  size = Math.round(Math.log2(size));\n  // Calculate high water mark\n  size = 2 ** size;\n  // Clamp value\n  return clamp(size, HIGH_WATER_MARK_MIN, HIGH_WATER_MARK_MAX);\n}\n","import { UTF8_B0_2B_LEN } from \"./utf8\";\n\n// Configurable constants\n\n/**\n * The default initial size of a trie.\n */\nexport const TRIE_DEFAULT_SIZE = 524288; // 2 MiB\n\n/**\n * The growth factor for resizing a trie (Approx. Phi)\n */\nexport const TRIE_GROWTH_FACTOR = 1.6180339887;\n\n// Internal trie pointer\n\nexport const TRIE_PTR_IDX_IDX = 0;\nexport const TRIE_PTR_IDX_MEM = 1;\n\nexport const TRIE_PTR_MEM = TRIE_PTR_IDX_MEM;\n\n// Cross-trie pointer (aka redirect)\n\nexport const TRIE_XPTR_ID_IDX = 0;\nexport const TRIE_XPTR_ID_MEM = 1;\n\nexport const TRIE_XPTR_IDX_IDX = 1;\nexport const TRIE_XPTR_IDX_MEM = 1;\n\nexport const TRIE_XPTR_MEM = TRIE_XPTR_ID_MEM + TRIE_XPTR_IDX_MEM;\n\n// Trie node\n\nexport const TRIE_NODE_ID_IDX = 0;\nexport const TRIE_NODE_ID_MEM = 1;\n\nexport const TRIE_NODE_VALUE_IDX = 1;\nexport const TRIE_NODE_VALUE_MEM = 1;\n\nexport const TRIE_NODE_CHILDREN_IDX = 2;\nexport const TRIE_NODE_CHILDREN_LEN = UTF8_B0_2B_LEN;\nexport const TRIE_NODE_CHILDREN_MEM = TRIE_PTR_MEM * TRIE_NODE_CHILDREN_LEN;\n\nexport const TRIE_NODE_MEM =\n  TRIE_NODE_ID_MEM + TRIE_NODE_VALUE_MEM + TRIE_NODE_CHILDREN_MEM;\n\n// Trie\n\n/**\n * Represents a null / undefined trie element.\n */\nexport const TRIE_NULL = 0;\n\nexport const TRIE_SIZE_IDX = 0;\nexport const TRIE_SIZE_MEM = 1;\n\nexport const TRIE_ROOT_IDX = 1;\nexport const TRIE_ROOT_MEM = TRIE_NODE_MEM;\n\nexport const TRIE_ID_IDX = TRIE_ROOT_IDX + TRIE_NODE_ID_IDX;\nexport const TRIE_MEM = TRIE_SIZE_MEM + TRIE_ROOT_MEM;\n","import { WriteStream } from \"node:fs\";\n\nimport {\n  TRIE_DEFAULT_SIZE,\n  TRIE_PTR_MEM,\n  TRIE_PTR_IDX_IDX,\n  TRIE_GROWTH_FACTOR,\n  TRIE_MEM,\n  TRIE_ID_IDX,\n  TRIE_NODE_CHILDREN_IDX,\n  TRIE_NODE_ID_IDX,\n  TRIE_NODE_VALUE_IDX,\n  TRIE_NULL,\n  TRIE_ROOT_IDX,\n  TRIE_SIZE_IDX,\n  TRIE_XPTR_MEM,\n  TRIE_XPTR_IDX_IDX,\n  TRIE_XPTR_ID_IDX,\n  TRIE_NODE_MEM,\n  TRIE_NODE_CHILDREN_MEM,\n  TRIE_NODE_CHILDREN_LEN,\n} from \"../constants/utf8Trie\";\nimport { UTF8_B0_MIN } from \"../constants/utf8\";\n\nexport function add(\n  trie: Int32Array,\n  key: ArrayLike<number>,\n  min: number,\n  max: number,\n): [Int32Array, number] {\n  let index = TRIE_ROOT_IDX;\n  while (min < max) {\n    index += TRIE_NODE_CHILDREN_IDX + TRIE_PTR_MEM * (key[min++] - UTF8_B0_MIN);\n    let child = trie[index + TRIE_PTR_IDX_IDX];\n    if (child === TRIE_NULL) {\n      // Allocate new node\n      child = trie[TRIE_SIZE_IDX];\n      if (child + TRIE_NODE_MEM > trie.length) {\n        trie = grow(trie, child + TRIE_NODE_MEM);\n      }\n      trie[TRIE_SIZE_IDX] += TRIE_NODE_MEM;\n      // Attach and initialize node\n      trie[index + TRIE_PTR_IDX_IDX] = child;\n      trie[child + TRIE_NODE_ID_IDX] = trie[TRIE_ID_IDX];\n    }\n    index = child;\n  }\n\n  return [trie, index];\n}\n\nexport function createTrie(id = 0, size = TRIE_DEFAULT_SIZE): Int32Array {\n  size = Math.max(TRIE_MEM, size);\n  const buffer = new SharedArrayBuffer(size << 2);\n  const trie = new Int32Array(buffer);\n  trie[TRIE_SIZE_IDX] = TRIE_MEM;\n  trie[TRIE_ID_IDX] = id;\n  return trie;\n}\n\nexport function grow(trie: Int32Array, minSize = 0): Int32Array {\n  const length = trie[TRIE_SIZE_IDX];\n  minSize = Math.max(minSize, Math.ceil(length * TRIE_GROWTH_FACTOR));\n  const buffer = new SharedArrayBuffer(minSize << 2);\n  const next = new Int32Array(buffer);\n  for (let i = 0; i < length; ++i) {\n    next[i] = trie[i];\n  }\n  return next;\n}\n\nexport function mergeLeft(\n  tries: Int32Array[],\n  at: number,\n  bt: number,\n  mergeFn: (ai: number, bi: number) => void,\n): void {\n  const queue: [number, number, number, number][] = [\n    [at, TRIE_ROOT_IDX, bt, TRIE_ROOT_IDX],\n  ];\n\n  do {\n    const Q = queue.length;\n    for (let q = 0; q < Q; ++q) {\n      let [at, ai, bt, bi] = queue[q];\n\n      // If right value is not null\n      const bvi = tries[bt][bi + TRIE_NODE_VALUE_IDX];\n      if (bvi !== TRIE_NULL) {\n        // If left value is not null\n        const avi = tries[at][ai + TRIE_NODE_VALUE_IDX];\n        if (avi !== TRIE_NULL) {\n          mergeFn(avi, bvi);\n        } else {\n          tries[at][ai + TRIE_NODE_VALUE_IDX] = bvi;\n        }\n      }\n\n      // Adjust to children property\n      ai += TRIE_NODE_CHILDREN_IDX;\n      bi += TRIE_NODE_CHILDREN_IDX;\n\n      // Traverse right children\n      const bn = bi + TRIE_NODE_CHILDREN_MEM;\n      while (bi < bn) {\n        // If right child is null\n        let ri = tries[bt][bi + TRIE_PTR_IDX_IDX];\n        if (ri === TRIE_NULL) {\n          // Move to next children\n          ai += TRIE_PTR_MEM;\n          bi += TRIE_PTR_MEM;\n          continue;\n        }\n\n        // Resolve right child if redirect\n        const rt = tries[bt][ri + TRIE_NODE_ID_IDX];\n        if (bt !== rt) {\n          ri = tries[bt][ri + TRIE_XPTR_IDX_IDX];\n        }\n\n        // If left child is null\n        let li = tries[at][ai + TRIE_PTR_IDX_IDX];\n        if (li === TRIE_NULL) {\n          // Allocate new redirect in left trie\n          li = tries[at][TRIE_SIZE_IDX];\n          if (li + TRIE_XPTR_MEM > tries[at].length) {\n            tries[at] = grow(tries[at], li + TRIE_XPTR_MEM);\n          }\n          tries[at][TRIE_SIZE_IDX] += TRIE_XPTR_MEM;\n          // Add new redirect\n          tries[at][li + TRIE_XPTR_ID_IDX] = rt;\n          tries[at][li + TRIE_XPTR_IDX_IDX] = ri;\n        } else {\n          // Resolve left child if redirect\n          const lt = tries[at][li + TRIE_NODE_ID_IDX];\n          if (at !== lt) {\n            ai = tries[at][li + TRIE_XPTR_IDX_IDX];\n          }\n          // Merge children\n          queue.push([lt, li, rt, ri]);\n        }\n\n        // Move to next children\n        ai += TRIE_PTR_MEM;\n        bi += TRIE_PTR_MEM;\n      }\n    }\n    queue.splice(0, Q);\n  } while (queue.length > 0);\n}\n\nexport function print(\n  tries: Int32Array[],\n  key: Buffer,\n  trieIndex: number,\n  stream: WriteStream,\n  separator = \"\",\n  callbackFn: (\n    stream: WriteStream,\n    key: Buffer,\n    keyLen: number,\n    valueIndex: number,\n  ) => void,\n): void {\n  const stack: [number, number, number][] = new Array(key.length + 1);\n  stack[0] = [trieIndex, TRIE_ROOT_IDX + TRIE_NODE_CHILDREN_IDX, 0];\n\n  let top = 0;\n  let tail = false;\n  do {\n    let [trieI, childPtr, numChild] = stack[top];\n\n    // Check if end of children array\n    if (numChild >= TRIE_NODE_CHILDREN_LEN) {\n      --top;\n      continue;\n    }\n\n    // Update stack top\n    stack[top][1] += TRIE_PTR_MEM;\n    ++stack[top][2];\n\n    // Check if child exists\n    let childI = tries[trieI][childPtr + TRIE_PTR_IDX_IDX];\n    if (childI === TRIE_NULL) {\n      continue;\n    }\n\n    // Resolve redirect, if any\n    const childTrieI = tries[trieI][childI + TRIE_NODE_ID_IDX];\n    if (trieI !== childTrieI) {\n      childI = tries[trieI][childI + TRIE_XPTR_IDX_IDX];\n      trieI = childTrieI;\n    }\n\n    // Add the child to the stack\n    key[top] = numChild + UTF8_B0_MIN;\n    stack[++top] = [trieI, childI + TRIE_NODE_CHILDREN_IDX, 0];\n\n    // Print value, if any\n    const valueIndex = tries[trieI][childI + TRIE_NODE_VALUE_IDX];\n    if (valueIndex !== TRIE_NULL) {\n      // Print separator if not first value\n      if (tail) {\n        stream.write(separator);\n      }\n      tail = true;\n      callbackFn(stream, key, top, valueIndex);\n    }\n  } while (top >= 0);\n}\n","import { WriteStream, createWriteStream } from \"node:fs\";\nimport { Worker } from \"node:worker_threads\";\n\nimport type { ProcessRequest } from \"./types/processRequest\";\nimport type { ProcessResponse } from \"./types/processResponse\";\n\nimport {\n  ENTRY_MAX_LEN,\n  MAX_STATIONS,\n  STATION_NAME_MAX_LEN,\n} from \"./constants/constraints\";\nimport { CHUNK_SIZE_MIN, HIGH_WATER_MARK_OUT } from \"./constants/stream\";\nimport { MAX_WORKERS, MIN_WORKERS } from \"./constants/workers\";\nimport { clamp, getFileChunks } from \"./utils/stream\";\nimport { print } from \"./utils/utf8Trie\";\nimport { MergeResponse } from \"./types/mergeResponse\";\nimport { MergeRequest } from \"./types/mergeRequest\";\n\nexport async function run(\n  filePath: string,\n  workerPath: string,\n  maxWorkers: number,\n  outPath = \"\",\n): Promise<void> {\n  // Sanitize number of workers\n  maxWorkers = clamp(maxWorkers, MIN_WORKERS, MAX_WORKERS);\n\n  // Split the file into chunks. Creates 1 or fewer chunks per worker\n  const chunks = await getFileChunks(\n    filePath,\n    maxWorkers,\n    ENTRY_MAX_LEN,\n    CHUNK_SIZE_MIN,\n  );\n\n  // Adjust the number of workers to the number of chunks\n  maxWorkers = chunks.length;\n\n  // Initialize data\n  const valBuf = new SharedArrayBuffer((MAX_STATIONS * maxWorkers + 1) << 4);\n  const mins = new Int16Array(valBuf);\n  const maxes = new Int16Array(valBuf, 2);\n  const counts = new Uint32Array(valBuf, 4);\n  const sums = new Float64Array(valBuf, 8);\n  const tries: Int32Array[] = new Array(maxWorkers);\n\n  // Create workers\n  const workers = new Array<Worker>(maxWorkers);\n  for (let i = 0; i < maxWorkers; ++i) {\n    const worker = new Worker(workerPath);\n    worker.on(\"error\", (err) => {\n      throw err;\n    });\n    worker.on(\"messageerror\", (err) => {\n      throw err;\n    });\n    worker.on(\"exit\", (code) => {\n      if (code > 1 || code < 0) {\n        throw new Error(`Worker ${worker.threadId} exited with code ${code}`);\n      }\n    });\n    workers[i] = worker;\n  }\n\n  // Process each chunk\n  const tasks = new Array<Promise<ProcessResponse>>(maxWorkers);\n  for (let i = 0; i < maxWorkers; ++i) {\n    const id = i;\n    const worker = workers[i];\n    const [start, end] = chunks[i];\n    tasks[i] = new Promise((resolve) => {\n      worker.once(\"message\", resolve);\n      worker.postMessage({\n        type: \"process_request\",\n        counts,\n        end,\n        filePath,\n        id,\n        maxes,\n        mins,\n        start,\n        sums,\n      } as ProcessRequest);\n    });\n  }\n\n  // Wait for completion\n  for await (const res of tasks) {\n    tries[res.id] = res.trie;\n  }\n\n  // Merge tries\n  for (let i = 0, j = maxWorkers - 1; i < j; i = 0) {\n    const merges: Promise<MergeResponse>[] = [];\n    for (; i < j; ++i) {\n      const a = i;\n      const b = j--;\n      const worker = workers[i];\n      merges.push(new Promise((resolve) => {\n        worker.once(\"message\", resolve);\n        worker.postMessage({\n          type: \"merge_request\",\n          a,\n          b,\n          counts,\n          maxes,\n          mins,\n          sums,\n          tries,\n        } as MergeRequest);\n      }));\n    }\n    for await (const res of merges) {\n      tries[res.id] = res.trie;\n    }\n  }\n\n  // Terminate workers\n  for (let i = 0; i < maxWorkers; ++i) {\n    await workers[i].terminate();\n  }\n\n  // Print results\n  const out = createWriteStream(outPath, {\n    fd: outPath.length < 1 ? 1 : undefined,\n    flags: \"a\",\n    highWaterMark: HIGH_WATER_MARK_OUT,\n  });\n  const buffer = Buffer.allocUnsafe(STATION_NAME_MAX_LEN);\n  out.write(\"{\");\n  print(tries, buffer, 0, out, \", \", printStation);\n  out.end(\"}\\n\");\n\n  function printStation(\n    stream: WriteStream,\n    name: Buffer,\n    nameLen: number,\n    vi: number,\n  ): void {\n    const avg = Math.round(sums[vi << 1] / counts[vi << 2]);\n    stream.write(name.toString(\"utf8\", 0, nameLen));\n    stream.write(\"=\");\n    stream.write((mins[vi << 3] / 10).toFixed(1));\n    stream.write(\"/\");\n    stream.write((avg / 10).toFixed(1));\n    stream.write(\"/\");\n    stream.write((maxes[vi << 3] / 10).toFixed(1));\n  }\n}\n","import { createReadStream } from \"node:fs\";\n\nimport type { ProcessRequest } from \"./types/processRequest\";\nimport type { ProcessResponse } from \"./types/processResponse\";\n\nimport { CHAR_SEMICOLON } from \"./constants/utf8\";\nimport { CHAR_NEWLINE } from \"./constants/utf8\";\nimport { CHAR_MINUS } from \"./constants/utf8\";\nimport { ENTRY_MAX_LEN, MAX_STATIONS } from \"./constants/constraints\";\nimport { CHAR_ZERO_11, CHAR_ZERO_111 } from \"./constants/stream\";\nimport { TRIE_NODE_VALUE_IDX, TRIE_NULL } from \"./constants/utf8Trie\";\nimport { getHighWaterMark } from \"./utils/stream\";\nimport { add, createTrie, mergeLeft } from \"./utils/utf8Trie\";\nimport { MergeRequest } from \"./types/mergeRequest\";\nimport { MergeResponse } from \"./types/mergeResponse\";\n\nexport async function run({\n  end,\n  filePath,\n  id,\n  start,\n  // Shared memory\n  counts,\n  maxes,\n  mins,\n  sums,\n}: ProcessRequest): Promise<ProcessResponse> {\n  // Check chunk size\n  if (start >= end) {\n    return { type: \"process_response\", id, trie: createTrie(id, 0) };\n  }\n\n  // Initialize constants\n  let trie = createTrie(id);\n  let stations = id * MAX_STATIONS + 1;\n  const buffer = Buffer.allocUnsafe(ENTRY_MAX_LEN);\n\n  // Create the chunk stream\n  const stream = createReadStream(filePath, {\n    start,\n    end: end - 1,\n    highWaterMark: getHighWaterMark(end - start),\n  });\n\n  // For each chunk\n  let bufI = 0;\n  let tempI = 0;\n  let leaf: number;\n  for await (const chunk of stream) {\n    // For each byte\n    const N = chunk.length;\n    for (let i = 0; i < N; ++i) {\n      if (chunk[i] === CHAR_SEMICOLON) {\n        // If semicolon\n        tempI = bufI;\n      } else if (chunk[i] !== CHAR_NEWLINE) {\n        // If not newline\n        buffer[bufI++] = chunk[i];\n      } else {\n        // Get temperature\n        const tempV = parseDouble(buffer, tempI, bufI);\n        bufI = 0;\n        // Add the station's name to the trie and get leaf index\n        [trie, leaf] = add(trie, buffer, 0, tempI);\n        // If the station existed\n        if (trie[leaf + TRIE_NODE_VALUE_IDX] !== TRIE_NULL) {\n          // Update the station's value\n          updateStation(trie[leaf + TRIE_NODE_VALUE_IDX], tempV);\n        } else {\n          // Add the new station's value\n          trie[leaf + TRIE_NODE_VALUE_IDX] = stations;\n          newStation(stations++, tempV);\n        }\n      }\n    }\n  }\n\n  function newStation(index: number, temp: number): void {\n    mins[index << 3] = temp;\n    maxes[index << 3] = temp;\n    counts[index << 2] = 1;\n    sums[index << 1] = temp;\n  }\n\n  function updateStation(index: number, temp: number): void {\n    index <<= 3;\n    mins[index] = mins[index] <= temp ? mins[index] : temp;\n    maxes[index] = maxes[index] >= temp ? maxes[index] : temp;\n    ++counts[index >> 1];\n    sums[index >> 2] += temp;\n  }\n\n  return { type: \"process_response\", id, trie };\n}\n\nexport function parseDouble(b: Buffer, min: number, max: number): number {\n  if (b[min] === CHAR_MINUS) {\n    ++min;\n    return min + 4 > max\n      ? -(10 * b[min] + b[min + 2] - CHAR_ZERO_11)\n      : -(100 * b[min] + 10 * b[min + 1] + b[min + 3] - CHAR_ZERO_111);\n  }\n  return min + 4 > max\n    ? 10 * b[min] + b[min + 2] - CHAR_ZERO_11\n    : 100 * b[min] + 10 * b[min + 1] + b[min + 3] - CHAR_ZERO_111;\n}\n\nexport function merge({a, b, tries, counts, maxes, mins, sums}: MergeRequest): MergeResponse {\n  mergeLeft(tries, a, b, mergeStations);\n  function mergeStations(ai: number, bi: number): void {\n    ai <<= 3;\n    bi <<= 3;\n    mins[ai] = Math.min(mins[ai], mins[bi]);\n    maxes[ai] = Math.max(maxes[ai], maxes[bi]);\n    counts[ai >> 1] += counts[bi >> 1];\n    sums[ai >> 2] += sums[bi >> 2];\n  }\n  return { type: \"merge_response\", id: a, trie: tries[a] };\n}\n","import { availableParallelism } from \"node:os\";\nimport { fileURLToPath } from \"node:url\";\nimport { isMainThread, parentPort } from \"node:worker_threads\";\n\nimport { run as runMain } from \"./main\";\nimport { merge, run as runWorker } from \"./worker\";\nimport { Message } from \"./types/message\";\nimport { ProcessRequest } from \"./types/processRequest\";\nimport { MergeRequest } from \"./types/mergeRequest\";\n\nif (isMainThread) {\n  const workerPath = fileURLToPath(import.meta.url);\n  runMain(process.argv[2], workerPath, availableParallelism());\n} else {\n  parentPort!.addListener(\"message\", async (msg: Message) => {\n    if (msg.type === \"process_request\") {\n      const res = await runWorker(msg as ProcessRequest);\n      parentPort!.postMessage(res);\n    }\n    if (msg.type === \"merge_request\") {\n      const res = merge(msg as MergeRequest);\n      parentPort!.postMessage(res);\n    }\n  });\n}\n"],"names":["at","bt","run","runMain","runWorker"],"mappings":"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"}