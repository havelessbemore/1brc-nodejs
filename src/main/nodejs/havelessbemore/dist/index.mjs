import{availableParallelism as v}from"node:os";import{fileURLToPath as F}from"node:url";import{isMainThread as V,parentPort as b}from"node:worker_threads";import{createWriteStream as x}from"node:fs";import{open as B}from"fs/promises";function h(e,t,r){return e>t?e<=r?e:r:t}async function d(e,t,r,p=0){let i=await B(e);try{let n=(await i.stat()).size,c=Math.max(p,Math.floor(n/t)),a=Buffer.allocUnsafe(r),s=[],u=0;for(let f=c;f<n;f+=c){let l=await i.read(a,0,r,f),I=a.indexOf(10);I>=0&&I<l.bytesRead&&(f+=I+1,s.push([u,f]),u=f)}return u<n&&s.push([u,n]),s}finally{await i.close()}}function w(e){return e*=152e-6,e=Math.round(Math.log2(e)),e=2**e,h(e,16384,1048576)}function L(e,t,r,p){let i=1;for(;r<p;){i+=2+1*(t[r++]-32);let n=e[i+0];n===0&&(n=e[0],n+218>e.length&&(e=N(e,n+218)),e[0]+=218,e[i+0]=n,e[n+0]=e[1]),i=n}return[e,i]}function g(e=0,t=655360){t=Math.max(219,t);let r=new Int32Array(new SharedArrayBuffer(t<<2));return r[0]=219,r[1]=e,r}function N(e,t=0){let r=e[0];t=Math.max(t,Math.ceil(r*1.6180339887));let p=new Int32Array(new SharedArrayBuffer(t<<2));for(let i=0;i<r;++i)p[i]=e[i];return p}function T(e,t,r,p){let i=new Set,n=[[t,1,r,1]];do{let c=n.length;for(let a=0;a<c;++a){let[s,u,f,l]=n[a],I=e[f][l+1];if(I!==0){let M=e[s][u+1];M!==0?p(M,I):e[s][u+1]=I}u+=2,l+=2;let R=l+216;for(;l<R;){let M=e[f][l+0];if(M!==0){let E=e[f][M+0];f!==E&&(M=e[f][M+1]);let o=e[s][u+0];if(o===0)o=e[s][0],o+2>e[s].length&&(e[s]=N(e[s],o+2),i.add(s)),e[s][0]+=2,e[s][u+0]=o,e[s][o+0]=E,e[s][o+1]=M;else{let m=e[s][o+0];s!==m&&(o=e[s][o+1]),n.push([m,o,E,M])}}u+=1,l+=1}}n.splice(0,c)}while(n.length>0);return Array.from(i)}function S(e,t,r,p,i="",n){let c=new Array(t.length+1);c[0]=[r,3,0];let a=0,s=!1;do{let[u,f,l]=c[a];if(l>=216){--a;continue}c[a][1]+=1,++c[a][2];let I=e[u][f+0];if(I===0)continue;let R=e[u][I+0];u!==R&&(I=e[u][I+1],u=R),t[a]=l+32,c[++a]=[u,I+2,0];let M=e[u][I+1];M!==0&&(s&&p.write(i),s=!0,n(p,t,a,M))}while(a>=0)}import{Worker as W}from"worker_threads";function U(e){let t=new W(e);return t.on("error",r=>{throw r}),t.on("messageerror",r=>{throw r}),t.on("exit",r=>{if(r>1||r<0)throw new Error(`Worker ${t.threadId} exited with code ${r}`)}),t}function y(e,t){return new Promise(r=>{e.once("message",r),e.postMessage(t)})}async function O(e,t,r,p=""){r=h(r,1,512);let i=await d(e,r,107,16384);r=i.length;let n=new SharedArrayBuffer(1e4*r+1<<4),c=new Int16Array(n),a=new Int16Array(n,2),s=new Uint32Array(n,4),u=new Float64Array(n,8),f=new Array(r),l=[],I=new Array(r);for(let o=0;o<r;++o){let m=U(t);I[o]=y(m,{type:"process",counts:s,end:i[o][1],filePath:e,id:o,maxes:a,mins:c,start:i[o][0],sums:u}).then(async D=>{let _=D.id;for(f[D.id]=D.trie;l.length>0;){let X=await y(m,{type:"merge",a:_,b:l.pop(),counts:s,maxes:a,mins:c,sums:u,tries:f});for(let A of X.ids)f[A]=X.tries[A]}return l.push(_),m.terminate()})}await Promise.all(I);let R=x(p,{fd:p.length<1?1:void 0,flags:"a",highWaterMark:1048576}),M=Buffer.allocUnsafe(100);R.write("{"),S(f,M,l[0],R,", ",E),R.end(`}
`);function E(o,m,D,_){let X=Math.round(u[_<<1]/s[_<<2]);o.write(m.toString("utf8",0,D)),o.write("="),o.write((c[_<<3]/10).toFixed(1)),o.write("/"),o.write((X/10).toFixed(1)),o.write("/"),o.write((a[_<<3]/10).toFixed(1))}}import{createReadStream as Z}from"node:fs";var C=11*48,P=111*48;function q(e,t,r){return e[t]===45?(++t,t+4>r?C-10*e[t]-e[t+2]:P-100*e[t]-10*e[t+1]-e[t+3]):t+4>r?10*e[t]+e[t+2]-C:100*e[t]+10*e[t+1]+e[t+3]-P}async function H({end:e,filePath:t,id:r,start:p,counts:i,maxes:n,mins:c,sums:a}){if(p>=e)return{id:r,trie:g(r,0)};let s=g(r),u=r*1e4+1,f=Buffer.allocUnsafe(107),l=Z(t,{start:p,end:e-1,highWaterMark:w(e-p)}),I=-1,R;for await(let o of l){let m=o.length;for(let D=0;D<m;++D)if(f[++I]=o[D],o[D]===10){let _=I-5;f[_]!==59&&(_+=1|1+~(f[_-1]===59));let X=q(f,_+1,I);I=-1,[s,R]=L(s,f,0,_),s[R+1]!==0?E(s[R+1],X):(s[R+1]=u,M(u++,X))}}function M(o,m){c[o<<3]=m,n[o<<3]=m,i[o<<2]=1,a[o<<1]=m}function E(o,m){o<<=3,c[o]=c[o]<=m?c[o]:m,n[o]=n[o]>=m?n[o]:m,++i[o>>1],a[o>>2]+=m}return{id:r,trie:s}}function k({a:e,b:t,tries:r,counts:p,maxes:i,mins:n,sums:c}){function a(u,f){u<<=3,f<<=3,n[u]=Math.min(n[u],n[f]),i[u]=Math.max(i[u],i[f]),p[u>>1]+=p[f>>1],c[u>>2]+=c[f>>2]}return{ids:T(r,e,t,a),tries:r}}if(V){let e=F(import.meta.url);O(process.argv[2],e,v())}else b.addListener("message",async e=>{if(e.type==="process")b.postMessage(await H(e));else if(e.type==="merge")b.postMessage(k(e));else throw new Error("Unknown message type")});
//# sourceMappingURL=index.mjs.map
