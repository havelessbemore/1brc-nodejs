import{availableParallelism as Y}from"node:os";import{fileURLToPath as Q}from"node:url";import{isMainThread as $,parentPort as g}from"node:worker_threads";import{closeSync as x,createWriteStream as F,openSync as G}from"node:fs";import{stdout as K}from"node:process";import{fstatSync as B,readSync as v}from"fs";function X(e,r,t){return e>r?e<=t?e:t:r}function b(e,r,t,a=0){let u=B(e).size,s=Math.max(a,Math.floor(u/r)),I=Buffer.allocUnsafe(t),p=[],c=0;for(let o=s;o<u;o+=s){let f=v(e,I,0,t,o),i=I.indexOf(10);i>=0&&i<f&&(o+=i+1,p.push([c,o]),c=o)}return c<u&&p.push([c,u]),p}function w(e){return e*=.00625,e=Math.round(Math.log2(e)),e=2**e,X(e,16384,8388608)}function L(e,r,t,a){let u=1;for(;t<a;){u+=2+1*(r[t++]-32);let s=e[u+0];s===0&&(s=e[0],s+218>e.length&&(e=S(e,s+218)),e[0]+=218,e[u+0]=s,e[s+0]=e[1]),u=s}return[e,u]}function N(e=0,r=655360){r=Math.max(219,r);let t=new Int32Array(new SharedArrayBuffer(r<<2));return t[0]=219,t[1]=e,t}function S(e,r=0){let t=e[0];r=Math.max(r,Math.ceil(t*1.618033988749895));let a=new Int32Array(new SharedArrayBuffer(r<<2));for(let u=0;u<t;++u)a[u]=e[u];return a}function T(e,r,t,a){let u=[],s=[[r,1,t,1]];do{let I=s.length;for(let p=0;p<I;++p){let[c,o,f,i]=s[p],l=e[f][i+1];if(l!==0){let m=e[c][o+1];m!==0?a(m,l):e[c][o+1]=l}o+=2,i+=2;let D=i+216;for(;i<D;){let m=e[f][i+0];if(m!==0){let h=e[f][m+0];f!==h&&(m=e[f][m+1]);let M=e[c][o+0];if(M===0)M=e[c][0],M+2>e[c].length&&(e[c]=S(e[c],M+2),u.push(c)),e[c][0]+=2,e[c][o+0]=M,e[c][M+0]=h,e[c][M+1]=m;else{let n=e[c][M+0];c!==n&&(M=e[c][M+1]),s.push([n,M,h,m])}}o+=1,i+=1}}s.splice(0,I)}while(s.length>0);return u}function O(e,r,t,a,u="",s){let I=new Array(r.length+1);I[0]=[t,3,0];let p=0,c=!1;do{let[o,f,i]=I[p];if(i>=216){--p;continue}I[p][1]+=1,++I[p][2];let l=e[o][f+0];if(l===0)continue;let D=e[o][l+0];o!==D&&(l=e[o][l+1],o=D),r[p]=i+32,I[++p]=[o,l+2,0];let m=e[o][l+1];m!==0&&(c&&a.write(u),c=!0,s(a,r,p,m))}while(p>=0)}import{Worker as Z}from"node:worker_threads";function C(e){let r=new Z(e);return r.on("error",t=>{throw t}),r.on("messageerror",t=>{throw t}),r.on("exit",t=>{if(t>1||t<0)throw new Error(`Worker ${r.threadId} exited with code ${t}`)}),r}function d(e,r){return new Promise(t=>{e.once("message",t),e.postMessage(r)})}async function P(e,r,t,a=""){t=X(t,1,512);let u=G(e,"r"),s=b(u,t,107,16384);t=s.length;let I=new SharedArrayBuffer(1e4*t+1<<4),p=new Int16Array(I),c=new Int16Array(I,2),o=new Uint32Array(I,4),f=new Float64Array(I,8),i=new Array(t),l=[],D=new Array(t);for(let n=0;n<t;++n){let R=C(r);D[n]=d(R,{type:0,counts:o,end:s[n][1],fd:u,id:n,maxes:c,mins:p,start:s[n][0],sums:f}).then(async E=>{let _=E.id;for(i[_]=E.trie;l.length>0;){let y=await d(R,{type:1,a:_,b:l.pop(),counts:o,maxes:c,mins:p,sums:f,tries:i});for(let A of y.ids)i[A]=y.tries[A]}return l.push(_),R.terminate()})}await Promise.all(D),x(u);let m=F(a,{fd:a.length<1?K.fd:void 0,flags:"a",highWaterMark:1048576}),h=Buffer.allocUnsafe(100);m.write("{"),O(i,h,l[0],m,", ",M),m.end(`}
`);function M(n,R,E,_){let y=Math.round(f[_<<1]/o[_<<2]);n.write(R.toString("utf8",0,E)),n.write("="),n.write((p[_<<3]/10).toFixed(1)),n.write("/"),n.write((y/10).toFixed(1)),n.write("/"),n.write((c[_<<3]/10).toFixed(1))}}import{readSync as V}from"fs";var U=11*48,q=111*48;function H(e,r,t){return e[r]===45?(++r,r+4>t?U-10*e[r]-e[r+2]:q-100*e[r]-10*e[r+1]-e[r+3]):r+4>t?10*e[r]+e[r+2]-U:100*e[r]+10*e[r+1]+e[r+3]-q}function W({end:e,fd:r,id:t,start:a,counts:u,maxes:s,mins:I,sums:p}){let c=w(e-a),o=Buffer.allocUnsafe(c+107),f=0,i=0,l=0,D=t*1e4+1,m=N(t);for(;a<e;){let n=V(r,o,f,c,a);a+=n;for(let R=f+n;f<R;++f)if(o[f]===10){let E=f-5;o[E]!==59&&(E+=1|1+~(o[E-1]===59)),[m,i]=L(m,o,l,E),l=f+1;let _=H(o,E+1,f);i+=1,m[i]!==0?M(m[i],_):(m[i]=D,h(D++,_))}o.copyWithin(0,l,f),f-=l,l=0}function h(n,R){I[n<<3]=R,s[n<<3]=R,u[n<<2]=1,p[n<<1]=R}function M(n,R){n<<=3,I[n]=I[n]<=R?I[n]:R,s[n]=s[n]>=R?s[n]:R,++u[n>>1],p[n>>2]+=R}return{id:t,trie:m}}function k({a:e,b:r,tries:t,counts:a,maxes:u,mins:s,sums:I}){function p(o,f){o<<=3,f<<=3,s[o]=s[o]<=s[f]?s[o]:s[f],u[o]=u[o]>=u[f]?u[o]:u[f],a[o>>1]+=a[f>>1],I[o>>2]+=I[f>>2]}return{ids:T(t,e,r,p),tries:t}}if($){let e=Q(import.meta.url);P(process.argv[2],e,Y())}else g.addListener("message",e=>{if(e.type===0)g.postMessage(W(e));else if(e.type===1)g.postMessage(k(e));else throw new Error("Unknown message type")});
//# sourceMappingURL=index.mjs.map
