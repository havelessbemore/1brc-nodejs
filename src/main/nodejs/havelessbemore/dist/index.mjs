/*!
 * https://github.com/havelessbemore/1brc-nodejs
 *
 * MIT License
 *
 * Copyright (C) 2024-2024 Michael Rojas <dev.michael.rojas@gmail.com> (https://github.com/havelessbemore)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import{availableParallelism as z}from"node:os";import{fileURLToPath as Y}from"node:url";import{isMainThread as j,parentPort as L}from"node:worker_threads";import{createWriteStream as J,createReadStream as Q}from"node:fs";import{open as ee}from"fs/promises";import{Worker as te}from"worker_threads";const x=1e4,re=100,P=107,ne=45,U=10,se=59,W=48,C=32,oe=192,B=16384,ae=1048576,ie=1048576,_e=152e-6,ce=B,F=11*W,k=111*W,Ee=1,fe=512;function K(e,t,r){return e>t?e<=r?e:r:t}async function Ie(e,t,r,l=0){const o=await ee(e);try{const i=(await o.stat()).size,I=Math.max(l,Math.floor(i/t)),s=Buffer.allocUnsafe(r),a=[];let _=0;for(let f=I;f<i;f+=I){const M=await o.read(s,0,r,f),E=s.indexOf(U);E>=0&&E<M.bytesRead&&(f+=E+1,a.push([_,f]),_=f)}return _<i&&a.push([_,i]),a}finally{await o.close()}}function le(e){return e*=_e,e=Math.round(Math.log2(e)),e=2**e,K(e,B,ae)}const ue=524288,Re=1.6180339887,p=0,Me=1,A=Me,Te=0,me=1,X=1,he=1,S=me+he,D=0,we=1,d=1,Ae=1,N=2,Z=oe,b=A*Z,H=we+Ae+b,w=0,g=0,de=1,y=1,ge=H,G=y+D,q=de+ge;function pe(e,t,r,l){let o=y;for(;r<l;){o+=N+A*(t[r++]-C);let i=e[o+p];i===w&&(i=e[g],i+H>e.length&&(e=$(e,i+H)),e[g]+=H,e[o+p]=i,e[i+D]=e[G]),o=i}return[e,o]}function v(e=0,t=ue){t=Math.max(q,t);const r=new Int32Array(new SharedArrayBuffer(t<<2));return r[g]=q,r[G]=e,r}function $(e,t=0){const r=e[g];t=Math.max(t,Math.ceil(r*Re));const l=new Int32Array(new SharedArrayBuffer(t<<2));for(let o=0;o<r;++o)l[o]=e[o];return l}function De(e,t,r,l){const o=[[t,y,r,y]];do{const i=o.length;for(let I=0;I<i;++I){let[s,a,_,f]=o[I];const M=e[_][f+d];if(M!==w){const u=e[s][a+d];u!==w?l(u,M):e[s][a+d]=M}a+=N,f+=N;const E=f+b;for(;f<E;){let u=e[_][f+p];if(u===w){a+=A,f+=A;continue}const T=e[_][u+D];_!==T&&(u=e[_][u+X]);let m=e[s][a+p];if(m===w)m=e[s][g],m+S>e[s].length&&(e[s]=$(e[s],m+S)),e[s][g]+=S,e[s][m+Te]=T,e[s][m+X]=u;else{const n=e[s][m+D];s!==n&&(a=e[s][m+X]),o.push([n,m,T,u])}a+=A,f+=A}}o.splice(0,i)}while(o.length>0)}function Ne(e,t,r,l,o="",i){const I=new Array(t.length+1);I[0]=[r,y+N,0];let s=0,a=!1;do{let[_,f,M]=I[s];if(M>=Z){--s;continue}I[s][1]+=A,++I[s][2];let E=e[_][f+p];if(E===w)continue;const u=e[_][E+D];_!==u&&(E=e[_][E+X],_=u),t[s]=M+C,I[++s]=[_,E+N,0];const T=e[_][E+d];T!==w&&(a&&l.write(o),a=!0,i(l,t,s,T))}while(s>=0)}function ye(e){const t=new te(e);return t.on("error",r=>{throw r}),t.on("messageerror",r=>{throw r}),t.on("exit",r=>{if(r>1||r<0)throw new Error(`Worker ${t.threadId} exited with code ${r}`)}),t}function V(e,t){return new Promise(r=>{e.once("message",r),e.postMessage(t)})}async function Oe(e,t,r,l=""){r=K(r,Ee,fe);const o=await Ie(e,r,P,ce);r=o.length;const i=new SharedArrayBuffer(x*r+1<<4),I=new Int16Array(i),s=new Int16Array(i,2),a=new Uint32Array(i,4),_=new Float64Array(i,8),f=new Array(r),M=new Array(r);for(let n=0;n<r;++n)M[n]=ye(t);const E=new Array(r);for(let n=0;n<r;++n)E[n]=V(M[n],{type:"process_request",counts:a,end:o[n][1],filePath:e,id:n,maxes:s,mins:I,start:o[n][0],sums:_}).then(c=>{f[c.id]=c.trie});for(let n=E.length-1;n>0;--n){const c=n-1>>1,R=n;E[c]=E[c].then(()=>E[R]).then(()=>V(M[c],{type:"merge_request",a:c,b:R,counts:a,maxes:s,mins:I,sums:_,tries:f})).then(h=>{f[h.id]=h.trie})}for(let n=0;n<r;++n)E[n]=E[n].then(()=>M[n].terminate());await Promise.all(E);const u=J(l,{fd:l.length<1?1:void 0,flags:"a",highWaterMark:ie}),T=Buffer.allocUnsafe(re);u.write("{"),Ne(f,T,0,u,", ",m),u.end(`}
`);function m(n,c,R,h){const O=Math.round(_[h<<1]/a[h<<2]);n.write(c.toString("utf8",0,R)),n.write("="),n.write((I[h<<3]/10).toFixed(1)),n.write("/"),n.write((O/10).toFixed(1)),n.write("/"),n.write((s[h<<3]/10).toFixed(1))}}async function Xe({end:e,filePath:t,id:r,start:l,counts:o,maxes:i,mins:I,sums:s}){if(l>=e)return{type:"process_response",id:r,trie:v(r,0)};let a=v(r),_=r*x+1;const f=Buffer.allocUnsafe(P),M=Q(t,{start:l,end:e-1,highWaterMark:le(e-l)});let E=0,u=0,T;for await(const c of M){const R=c.length;for(let h=0;h<R;++h)if(c[h]===se)u=E;else if(c[h]!==U)f[E++]=c[h];else{const O=He(f,u,E);E=0,[a,T]=pe(a,f,0,u),a[T+d]!==w?n(a[T+d],O):(a[T+d]=_,m(_++,O))}}function m(c,R){I[c<<3]=R,i[c<<3]=R,o[c<<2]=1,s[c<<1]=R}function n(c,R){c<<=3,I[c]=I[c]<=R?I[c]:R,i[c]=i[c]>=R?i[c]:R,++o[c>>1],s[c>>2]+=R}return{type:"process_response",id:r,trie:a}}function He(e,t,r){return e[t]===ne?(++t,t+4>r?-(10*e[t]+e[t+2]-F):-(100*e[t]+10*e[t+1]+e[t+3]-k)):t+4>r?10*e[t]+e[t+2]-F:100*e[t]+10*e[t+1]+e[t+3]-k}function Le({a:e,b:t,tries:r,counts:l,maxes:o,mins:i,sums:I}){De(r,e,t,s);function s(a,_){a<<=3,_<<=3,i[a]=Math.min(i[a],i[_]),o[a]=Math.max(o[a],o[_]),l[a>>1]+=l[_>>1],I[a>>2]+=I[_>>2]}return{type:"merge_response",id:e,trie:r[e]}}if(j){const e=Y(import.meta.url);Oe(process.argv[2],e,z())}else L.addListener("message",async e=>{if(e.type==="process_request"){const t=await Xe(e);L.postMessage(t)}else if(e.type==="merge_request"){const t=Le(e);L.postMessage(t)}else throw new Error("Unknown message type")});
//# sourceMappingURL=index.mjs.map
